on:
    push:
        branches:
            - master
            - beta
            - +([0-9])?(.{+([0-9]),x}).x

permissions:
    contents: write
    pull-requests: write
    issues: write
    deployments: write

name: üì¶ Create New Release

jobs:
    checks:
        name: ‚úÖ Check for Release
        runs-on: ubuntu-latest
        timeout-minutes: 15

        env:
            HUSKY: 0

        steps:
            - name: üìÄ Check out code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1

            - name: üß™ Check out repository code
              uses: ./.github/workflows/health-check

    release:
        name: üì¶ Release Version
        runs-on: ubuntu-latest
        timeout-minutes: 20
        needs:
            - checks

        env:
            HUSKY: 0

        steps:
            - name: üìÄ Check out code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  persist-credentials: false

            - name: üñ•Ô∏è Setup Env
              uses: ./.github/workflows/install

            - name: üÜö Extract Next Release Version
              id: extract-version
              run: |
                  npx semantic-release --no-ci --dry-run --plugins @semantic-release/commit-analyzer,@semantic-release/release-notes-generator --branches master
                  npx semantic-release --no-ci --dry-run --plugins @semantic-release/commit-analyzer,@semantic-release/release-notes-generator --branches master > output.txt

                  NEXT_VERSION=$(cat output.txt \
                  | grep "The next release version is" \
                  | node -e "console.log(require('fs').readFileSync(0, 'utf-8').match(/The next release version is (\d+\.\d+\.\d+)/)?.[1] ?? '')")

                  echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT
              env:
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

            - name: üî® Build Package
              if: steps.extract-version.outputs.version != ''
              run: |
                  # update package.json version - for packing purposes
                  node -e "const fs = require('fs'); \
                  const pkg = require('./package.json'); \
                  pkg.version = '${{ steps.extract-version.outputs.version }}'; \
                  fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 4));"

                  npm run pack

            - name: ü§ê Archive pack file
              if: steps.extract-version.outputs.version != ''
              uses: thedoctor0/zip-release@master
              with:
                  path: ./bin/*
                  filename: pack.zip

            - name: üöÄ Release
              if: steps.extract-version.outputs.version != ''
              env:
                  # This is required to make semantic-release work with GitHub Actions
                  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
                  GIT_AUTHOR_NAME: github-bot
                  GIT_AUTHOR_EMAIL: github-bot@gmail.com
                  GIT_COMMITTER_NAME: github-bot
                  GIT_COMMITTER_EMAIL: github-bot@gmail.com
              run: |
                  npx semantic-release
